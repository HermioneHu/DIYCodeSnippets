<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>CodeBlock</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>    // 搭建上下文环境
    // 从应用程序包中加载模型文件
    NSManagedObjectModel *model = [NSManagedObjectModel mergedModelFromBundles:nil];
    // 传输模型对象，初始化NSPersistentStoreCoordinator
    NSPersistentStoreCoordinator *psc = [[NSPersistentStoreCoordinator alloc]initWithManagedObjectModel:model];
    // 构建sqlite数据库文件路径
    NSString *docs = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES)lastObject];
    NSURL *url = [NSURL fileURLWithPath:[docs stringByAppendingPathComponent:@"person.data"]];
    // 添加持久化存储库，这里使用sqlite作为存储库
    NSError *error = nil;
    NSPersistentStore *store = [psc addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:url options:nil error:&amp;error];
    if (store == nil)
    {
        [NSException raise:@"添加数据库错误" format:@"%@",[error localizedDescription]];
    }
    
    // 初始化上下文，设置persistentStoreCoordinator属性
    NSManagedObjectContext *context = [[NSManagedObjectContext alloc]initWithConcurrencyType:NSMainQueueConcurrencyType];
    context.persistentStoreCoordinator = psc;
    
    
    // 添加数据到数据库
    // 传入上下文，创建一个Person实体对象
    Person *person = [NSEntityDescription insertNewObjectForEntityForName:@"Person" inManagedObjectContext:context];
    // 设置Person简单属性
    person.name = @"hello";
    person.gender = @"hi";
 
    // 利用上下文，将数据同步导持久化存储库
    BOOL success = [context save:&amp;error];
    if (!success)
    {
        [NSException raise:@"访问数据库错误" format:@"%@",[error localizedDescription]];
    }
    // 如果想要做更新操作，只要在更改了实体对象的书香后调用【context save：&amp;error】，就能将更新的数据同步到数据库
    
    
    
    // 3， 从数据库中查询数据
    // 初始化一个查询请求
    NSFetchRequest *request = [[NSFetchRequest alloc] init];
    // 设置要查询的实体
    request.entity = [NSEntityDescription entityForName:@"Person" inManagedObjectContext:context];
    // 设置排序（）
//    NSSortDescriptor *sort = [NSSortDescriptor sortDescriptorWithKey:@"gender" ascending:NO];
    // 设置过滤条件（搜索name包含字符串“xxx”的记录，主义：设置条件过滤时，数据库SQL语句中的%要用*来代替）
//    NSPredicate *predicate = [NSPredicate predicateWithFormat:@"name like %@",@"*xxx"];
//    request.predicate = predicate;
    // 执行请求
    NSArray *objs = [context executeFetchRequest:request error:&amp;error];
    if (error)
    {
        [NSException raise:@"查询错误" format:@"%@",[error localizedDescription]];

    }
    // 遍历数据
    for (Person *obj in objs)
    {
        NSLog(@"name = %@",person.name);
    }
    // ps：coredata不会根据试题中的关联关系立即获取相应的关联对象，比如通过coredata取出person实体时，并不会立即查询相关联的card实体，当应用真的需要使用card时，才会再次查询数据库，加载card实体的信息，这个就是coredata的延迟加载机制
    
    // 4,删除数据库中的数据
    // 传入需要喊出的实体对象
    [context deleteObject:person];
    // 将结果同步到数据库
    [context save:&amp;error];
    if (error)
    {
        [NSException raise:@"删除错误" format:@"%@",[error localizedDescription]];
    }
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>0D4BD9DD-84FA-49AA-8649-B97CA96938D3</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Objective-C</string>
	<key>IDECodeSnippetTitle</key>
	<string>CoreData</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
